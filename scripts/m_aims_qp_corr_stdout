#!/usr/bin/env python3
"""compute and plot QP energy correction from aims stdout file"""
# -*- coding: utf-8 -*-
from argparse import ArgumentParser, RawDescriptionHelpFormatter

import numpy as np

from mushroom.aims import StdOut
from mushroom.visual.graceplot import Plot


def m_aims_qp_corr_stdout(aimsout, kind="xc", eksmin=None, eksmax=None, refopt=None):
    """the main function

    Returns:
        fig, ax
    """
    s = StdOut(aimsout)
    if kind == "c":
        data = s.get_QP_sigc()
    elif kind == "x" or kind == "exx":
        data = s.get_QP_sigx()
    elif kind == "xc":
        data = s.get_QP_sigc() + s.get_QP_sigx()
    eks, _ = s.get_QP_bandstructure("eps")
    nspins, nkpts, nbands, _ = s.get_n_spin_kpt_band_basis()
    fig, ax = Plot.subplots(1, 1)
    ref = 0.0
    if refopt is not None:
        if refopt == "vbm":
            ref = eks.vbm
        elif refopt == "fermi":
            ref = eks.efermi
        else:
            raise ValueError("unknown reference option: %s" % refopt)

    ax.plot_group(eks.eigen - ref, sigc, color="k", ls="none")
    # ax.set_lim(xmin=np.min(eks), xmax=np.max(eks),
    #            ymin=np.min(sigc), ymax=np.max(sigc))
    ax.tight_graph()

    # draw reference
    ax.axhline(0.0, ls="dashed", color="gray")
    ax.axvline(0.0, ls="dashed", color="gray")

    return fix, ax


if __name__ == '__main__':
    p = ArgumentParser(description=__doc__)
    p.add_argument("aimsout", help="aims stdout file")
    p.add_argument("-o", dest="output_agr", default=None, help="path of grace output")
    p.add_argument("--kind", default="xc", choices=["x", "c", "xc", "exx"],
                   help="type of QP correction, default X+C")
    p.add_argument("--emin", dest="eksmin", default=None, help="minimal KS energy to show on plot")
    p.add_argument("--emax", dest="eksmax", default=None, help="minimal KS energy to show on plot")
    p.add_argument("--ref", dest="refopt", default=None, choices=[None, "vbm", "fermi"],
                   help="reference as energy (absicca) zero")
    args = p.parse_args()

    fig, ax = m_aims_qp_corr_stdout(args.aimsout, kind=args.kind,
                                    eksmin=args.eksmin, eksmax=args.eksmax,
                                    refopt=args.refopt)
    output_agr = args.output_agr
    if args.output_agr is None:
        output_agr = {
            "x": "plot_sigx.agr",
            "exx": "plot_sigx.agr",
            "c": "plot_sigc.agr",
            "xc": "plot_qpcorr.agr",
        }
    fig.write(output_agr)

