#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""analyze GAP eqpeV data from casename.eqpeV_GW and casename.eqpeV_GW0
"""

def _parser():
    """the parser"""
    from argparse import ArgumentParser, RawDescriptionHelpFormatter
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("-c", dest="casename", type=str, default=None,
                   help="casename")
    p.add_argument("-p", dest="dirpath", type=str, default=".",
                   help="path to the directory containg inputs and outputs")
    p.add_argument("-f", dest="eqpevfile", type=str, default=None,
                   help="path of eqpev file")
    p.add_argument("-t", dest="trans", type=str, default=None, nargs="+",
                   help="transitions of interest, in the form of 'ivk:ick'")
    p.add_argument("-g", dest="method", type=str, default="qp",
                   choices=["g0w0", "gw0", "ks", "hf", "qp"], help="path of eqpev file")
    p.add_argument("--nohead", dest="removehead", action="store_true",
                   help="remove header when display")
    p.add_argument("--occ", dest="occ_thres", type=float, default=0.01,
                   help="occupation threshold passed to Eqpev object")
    return p

def m_gap_analyze_eqpev():
    """the main stream"""
    args = _parser().parse_args()

    from mushroom.core.display import one_line_center_banner
    from mushroom.core.bs import display_band_analysis, display_transition_energies
    from mushroom.gap import Eqpev

    if args.eqpevfile is not None:
        eqpev = Eqpev(peqpev=args.eqpevfile, dirpath=args.dirpath,
                      casename=args.casename, occ_thres=args.occ_thres)
        method = args.method
        if args.method in ["g0w0", "gw0", "qp"]:
            method = "qp"
        qpbs, qpinfo = eqpev.get_QP_bandstructure, "{} band structure".format(eqpev.method.upper())
        bs, info = {eqpev.method: (qpbs, qpinfo), "qp": (qpbs, qpinfo),
                    "ks": (eqpev.get_KS_bandstructure, "KS band structure"),
                    "hf": (eqpev.get_HF_bandstructure, "HF band structure"),}\
                   .get(method, (None, None))
    else:
        if args.method in ["g0w0", "ks", "qp", "hf"]:
            eqpev = Eqpev(dirpath=args.dirpath, casename=args.casename,
                          method='g0w0', occ_thres=args.occ_thres)
            qpbs, qpinfo = eqpev.get_QP_bandstructure, \
                           "{} band structure".format(eqpev.method.upper())
            bs, info = {"g0w0": (qpbs, qpinfo), "qp": (qpbs, qpinfo),
                        "ks": (eqpev.get_KS_bandstructure, "KS band structure"),
                        "hf": (eqpev.get_HF_bandstructure, "HF band structure"),}\
                       .get(args.method, (None, None))
        else:
            eqpev = Eqpev(dirpath=args.dirpath, casename=args.casename,
                          method='gw0', occ_thres=args.occ_thres)
            bs = eqpev.get_QP_bandstructure
            info = "GW0 band structure"
    if not args.removehead:
        print(one_line_center_banner(info))
    display_band_analysis(bs(), eqpev.ibzkpts)
    if args.trans is not None:
        display_transition_energies(args.trans, bs(), eqpev.ibzkpts)

if __name__ == "__main__":
    m_gap_analyze_eqpev()

