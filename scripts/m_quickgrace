#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""draw grace plot quickly from data files, using np.loadtxt

Column index starts from 0. Allow dataset separated by empty lines.
Support multiple data files.
Note that the generated file is rough.

Current caveat:
  - single graph only
  - all data will be read and processed later
  - only support index-y or xy. no xyz or xysize

Note:
    linewidth, color and symbol will be set for all datasets
"""
from io import StringIO
import warnings
from argparse import ArgumentParser, RawDescriptionHelpFormatter
import numpy as np

from mushroom.core.ioutils import get_filename_wo_ext, readtext_split_emptyline
from mushroom.core.ioutils import decode_float_ends
from mushroom.visual.graceplot import Plot


def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("data_files", help="files to plot", nargs="+", type=str)
    p.add_argument("-t", dest="title", type=str,
                   help="title that will be parsed to the first graph", default=None)
    p.add_argument("--xl", dest="xlabel", type=str, help="x label", default=None)
    p.add_argument("--xr", dest="xrange", type=str, default=None,
                   help="x range, e.g. 'm8~5' for -8.0 to 5.0")
    p.add_argument("--yl", dest="ylabel", type=str, help="y label", default=None)
    p.add_argument("--lw", dest="linewidth", type=float, default=None, help="line width")
    p.add_argument("-c", dest="color", type=str, help="color code", default=None)
    p.add_argument("--yr", dest="yrange", type=str, default=None,
                   help="same as --xr, for y range")
    p.add_argument("-s", dest="symbol", type=str, help="symbol", default="none")
    p.add_argument("-o", dest="output", type=str, default=None,
                   help="output agr filename")
    p.add_argument("-d", dest="delimiter", type=str, default=None,
                   help="delimiter parsed to numpy.loadtxt")
    # data column options
    d = p.add_mutually_exclusive_group()
    d.add_argument("-x", dest="ix", type=int, help="xcol", default=0)
    d.add_argument("--xy", nargs="+", type=str, help="xcol:ycol")
    # sort options
    s = p.add_mutually_exclusive_group()
    s.add_argument("--sort", action="store_true",
                   help="sort: X not supported, Y for cols=1")
    # legend options
    l = p.add_mutually_exclusive_group()
    l.add_argument("--l-comment", dest="leg_comment", action="store_true",
                   help="use comment line (starting exactly # and single space) above the data session")
    l.add_argument("--l-add-fn", dest="leg_add_fn", action="store_true",
                   help="add filename to legend")
    l.add_argument("--l-fn-only", dest="leg_fn_only", action="store_true",
                   help="only use filename as legend")
    l.add_argument("--l-exp", dest="leg_explicit", type=str, nargs="+", default=None,
                   help="explicit legend; match number of datasets, default if missing")
    try:
        from argcomplete import autocomplete
        autocomplete(p)
    except ImportError:
        pass
    return p


def m_quickgrace():
    """main stream"""
    args = _parser().parse_args()
    fig, ax = Plot.subplots(1, 1)
    ax.set_title(title=args.title)
    ax.set_xlabel(args.xlabel)
    ax.set_ylabel(args.ylabel)

    legends_comments = []
    for fn in args.data_files:
        with open(fn, 'r') as h:
            legends_comments.extend(x[2:].strip() for x in h.readlines() if x.startswith("# "))

    # a generator to find explicit legend, None if exhausted
    def get_explict_legend():
        if args.leg_explicit:
            for leg in args.leg_explicit:
                yield leg
        if args.leg_comment:
            for leg in legends_comments:
                yield leg
        while True:
            yield None

    legends = get_explict_legend()

    warnings.filterwarnings('ignore', r'loadtxt: Empty input file')

    for fn in args.data_files:
        datastrings = readtext_split_emptyline(fn)

        for s in datastrings:
            data_cols = np.loadtxt(StringIO(s), unpack=True,
                                   delimiter=args.delimiter)
            ncols = len(data_cols)
            # no data
            if ncols == 0:
                continue
            kwargs = {"comment": fn, "symbol": args.symbol,
                      "lw": args.linewidth,
                      "color": args.color}
            if len(data_cols.shape) == 1:
                if args.sort:
                    data_cols.sort()
                ax.plot(list(range(1, len(data_cols) + 1)), data_cols, **kwargs)
                continue
            if args.xy is not None:
                for xy in args.xy:
                    ix, iy = tuple(map(int, xy.split(':')))
                    label = next(legends)
                    if label is None:
                        label = "{}:{}".format(ix, iy)
                    ax.plot(data_cols[ix], data_cols[iy], label=label,
                            **kwargs)
                continue
            for iy in range(ncols):
                # skip plotting against itself
                if iy == args.ix:
                    continue
                label = next(legends)
                if label is None:
                    label = "{}:{}".format(args.ix, iy)
                if args.leg_add_fn:
                    label = "{}:{}:{}".format(fn, args.ix, iy)
                if args.leg_fn_only:
                    label = fn
                ax.plot(data_cols[args.ix], data_cols[iy], label=label, **kwargs)

    if args.xrange is not None:
        ax.set_xlim(*decode_float_ends(args.xrange))
    if args.yrange is not None:
        ax.set_ylim(*decode_float_ends(args.yrange))
    if args.xrange is None and args.yrange is None:
        fig.tight_graph()

    output = args.output
    if output is None:
        output = get_filename_wo_ext(args.data_files[0]) + "_quickgp.agr"
    fig.write(output)


if __name__ == "__main__":
    m_quickgrace()
