#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""draw projected band structure (or partial wave) from vasp output and export to an XmGrace plot.

In the plot, the value of partial wave is proportional to the diameter of the circle.
The summed partial wave for atom and projector is stored in ``pwav.dat``

For atom-projector-band (apb) string, see ``mushroom.core.bs.split_apb``
"""
from sys import argv
from argparse import ArgumentParser, RawDescriptionHelpFormatter
import numpy as np

from mushroom.core.logger import create_logger
from mushroom.core.cell import Cell
from mushroom.core.bs import split_apb
from mushroom.core.kpoints import KPath
from mushroom.core.data import export_2d_data
from mushroom.core.ioutils import decode_float_ends, get_filename_wo_ext
from mushroom.visual.graceplot import Plot, prefer_gracecolors
from mushroom.vasp import read_procar

_logger = create_logger("mv_pwav")
del create_logger

def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("-p", dest="procar", type=str, default="PROCAR",
                   help="PROCAR file to read band data")
    p.add_argument("--pos", dest="poscar", type=str, default="POSCAR",
                   help="POSCAR structure file")
    p.add_argument("--sym", dest="ksymbols", type=str, default=None, nargs="+",
                   help="Symbols of high symmetry points")
    p.add_argument("-o", dest="output", type=str, default="plotpwav.agr",
                   help="path of agr file to export")
    p.add_argument("--removek", type=int, default=0,
                   help="number of kpoints at first to remove")
    p.add_argument("--area", dest="prop_area", action="store_true",
                   help="area proportional to partial wave instead of diameter")
    p.add_argument("--apb", type=str, default=None, nargs="+",
                   help="atom-projector-band (apb) string")
    p.add_argument("-s", dest="scale", type=float, default=1.0,
                   help="scale for the area of partial wave")
    p.add_argument("--spin", type=int, default=0, choices=[0, 1],
                   help="spin to draw")
    p.add_argument("--savefig", dest="fig_ext", type=str, default=None,
                   help="figure extension to convert")
    p.add_argument("-e", dest="energy_range", type=str, default=None,
                   help="energy range, e.g. 'm8~5' for -8.0 to 5.0")
    return p

# pylint: disable=R0914
def plot_pwav(graph, x, bs, apbs, spin, scale, colors=None, prop_area=False):
    """
    Args:
        graph (Graph)
        x (1d array)
        bs (BandStructure)
        apbs (list)
        spin (int)
        scale (float)
        colors (list)
        prop_area (bool)
    """
    if colors is None:
        colors = prefer_gracecolors
    with open('pwav.dat', 'w') as pwav_dat:
        for i, apb in enumerate(apbs):
            atms, prjs, bands = split_apb(apb)
            pwav = bs.get_pwav(atms, prjs, bands)[spin, :, :]
            eigen = bs.get_eigen(bands)[spin, :, :] - bs.efermi
            kwargs = {
                "datatype": "xysize",
                "color": colors[i%len(colors)],
                "label": "-".join(str(x) for x in apb.split(":")[:2]),
                "ls": "none",
                }
            if prop_area:
                graph.plot(x, eigen.transpose(),
                           size=np.sqrt(pwav.transpose())*scale,
                           **kwargs)
            else:
                graph.plot(x, eigen.transpose(),
                           size=pwav.transpose()*scale,
                           **kwargs)
            print("#atom-projector-band:{}".format(apb), file=pwav_dat)
            print("\n".join(export_2d_data(pwav)), file=pwav_dat, end="\n\n")

def m_vasp_pwav():
    """main stream"""
    args = _parser().parse_args()
    c = Cell.read(args.poscar)
    bs, kpts = read_procar(args.procar, filter_k_before=args.removek)
    bs.atms = c.atms
    kp = KPath(kpts, c.b)
    if args.spin >= bs.nspins:
        raise ValueError("ispin {} >= nspins = {}".format(args.spin, bs.nspins))
    p, ax = Plot.subplots(1, 1, description=" ".join(argv))
    ax.set_xlim(0.0, kp.x[-1] + 0.001)
    # draw bands
    ax.plot(kp.x, bs.eigen[args.spin, :, :].transpose() - bs.efermi, color="k", symbol="none")
    ax.x.set_major(grid=True, color="grey", lw=3, ls="dashed")
    ksymbols = None
    if args.ksymbols is not None:
        ksymbols = args.ksymbols
        if len(args.ksymbols) == 1:
            ksymbols = args.ksymbols[0].split()
    ax.x.set_spec(kp.special_x, labels=ksymbols)
    ax.y.set_label("Energy (eV)")
    # 36.0 is a base factor
    scale = (kp.x[-1] - kp.x[0]) / len(kp.x) * 36.0 * args.scale
    _logger.info("scale set to %r", scale)
    # draw zero line
    ax.axhline(0.0, ls="dashed")

    if args.apb is not None:
        plot_pwav(ax, kp.x, bs, args.apb, args.spin, scale,
                  prop_area=args.prop_area)

    # set limits
    if args.energy_range is not None:
        try:
            emin, emax = decode_float_ends(args.energy_range)
            ax.set_ylim(ymin=emin, ymax=emax)
            ax.tight_graph(xscale=None, yscale=None)
        except ValueError as err:
            raise ValueError("invalid energy range", args.energy_range) from err
    else:
        ax.tight_graph(xscale=None, yscale=1.2)

    p.write(file=args.output)
    if args.fig_ext is not None:
        p.savefig(get_filename_wo_ext(args.output) + "." + args.fig_ext)


if __name__ == "__main__":
    m_vasp_pwav()

