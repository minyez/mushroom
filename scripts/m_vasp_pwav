#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""draw projected band structure (or partial wave) from vasp output and export to an XmGrace plot.

For atom-projector-band (apb) string, see ``mushroom._core.bs.split_apb``
"""
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from mushroom._core.graceplot import Plot
from mushroom._core.cell import Cell
from mushroom._core.bs import split_apb
from mushroom._core.kpoints import KPath
from mushroom.vasp import read_procar

def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("-p", dest="procar", type=str, default="PROCAR",
                   help="PROCAR file to read band data")
    p.add_argument("--pos", dest="poscar", type=str, default="POSCAR",
                   help="POSCAR structure file")
    p.add_argument("--sym", dest="ksymbols", type=str, default=None,
                   help="Symbols of high symmetry points")
    p.add_argument("-o", dest="output", type=str, default="plotpwav.agr",
                   help="path of agr file to export")
    p.add_argument("--removek", type=int, default=0,
                   help="number of kpoints at first to remove")
    p.add_argument("--apb", type=str, default=None,
                   help="atom-projector-band (apb) string, separated by whitespace")
    p.add_argument("-s", dest="scale", type=float, default=None,
                   help="scale for the area of partial wave")
    p.add_argument("--spin", type=int, default=0, choices=[0, 1],
                   help="spin to draw")
    return p.parse_args()

# TODO refactor this long main stream
# pylint: disable=R0914
def m_v_pwav():
    """main stream"""
    args = _parser()
    colors = ["red", "blue"]

    c = Cell.read(args.poscar)
    bs, kpts = read_procar(args.procar, filter_k_before=args.removek)
    bs.atms = c.atms
    kp = KPath(kpts, c.b)
    isp = args.spin
    if isp >= bs.nspins:
        raise ValueError("ispin {} >= nspins = {}".format(isp, bs.nspins))
    p = Plot(1, 1)
    # set limits
    p[0].set_ylim(ymin=-6, ymax=6)
    p[0].set_xlim(0.0, kp.x[-1] + 0.0001)
    # draw bands
    p[0].plot(kp.x, bs.eigen[isp, :, :].transpose() - bs.efermi, color="k", symbol="none")
    p[0].x.set_major(grid=True, color="grey", lw=3, ls="dashed")
    if args.ksymbols is not None:
        p[0].x.set_spec(kp.special_x, labels=args.ksymbols.split())
    p[0].y.set_major(major=3)
    p[0].y.set_label("Energy (eV)")
    # draw partial wave with ellipse
    scale = args.scale
    if scale is None:
        scale = (kp.x[-1] - kp.x[0]) / len(kp.x)

    if args.apb is not None:
        for i, apb in enumerate(args.apb.split()):
            atms, prjs, bands = split_apb(apb)
            pwav = bs.get_pwav(atms, prjs, bands)[isp, :, :]
            eigen = bs.get_eigen(bands)[isp, :, :]
            nb = len(bands)
            for ib in range(nb):
                for x, y, w in zip(kp.x, eigen[:, ib], pwav[:, ib]):
                    p[0].circle((x, y), width=w*scale, color=colors[i], loctype="world")

    # draw zero line
    p[0].axhline(0.0, ls="dashed")
    p.export(file=args.output)


if __name__ == "__main__":
    m_v_pwav()

