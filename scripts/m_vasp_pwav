#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""draw projected band structure (or partial wave) from vasp output and export to an XmGrace plot.

In the plot, the value of partial wave is proportional to the diameter of the circle.
The summed partial wave for atom and projector is stored in ``pwav.dat``

For atom-projector-band (apb) string, see ``mushroom.core.bs.split_apb``
"""
from sys import argv
from argparse import ArgumentParser, RawDescriptionHelpFormatter

from mushroom.core.logger import create_logger
from mushroom.core.cell import Cell
from mushroom.core.bs import split_apb
from mushroom.core.kpoints import KPath
from mushroom.core.data import export_2d_data
from mushroom.graceplot import Plot, prefer_gracecolors
from mushroom.vasp import read_procar

_logger = create_logger("mv_pwav")
del create_logger

def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("-p", dest="procar", type=str, default="PROCAR",
                   help="PROCAR file to read band data")
    p.add_argument("--pos", dest="poscar", type=str, default="POSCAR",
                   help="POSCAR structure file")
    p.add_argument("--sym", dest="ksymbols", type=str, default=None,
                   help="Symbols of high symmetry points")
    p.add_argument("-o", dest="output", type=str, default="plotpwav.agr",
                   help="path of agr file to export")
    p.add_argument("--removek", type=int, default=0,
                   help="number of kpoints at first to remove")
    p.add_argument("--apb", type=str, default=None,
                   help="atom-projector-band (apb) string, separated by whitespace")
    p.add_argument("-s", dest="scale", type=float, default=1.0,
                   help="scale for the area of partial wave")
    p.add_argument("--spin", type=int, default=0, choices=[0, 1],
                   help="spin to draw")
    return p.parse_args()

def plot_pwav(graph, x, bs, apbs, spin, scale, colors=None):
    """
    Args:
        graph (Graph)
        x (1d array)
        bs (BandStructure)
        spin (int)
        scale (float)
        pwav_file (str)
    """
    if colors is None:
        colors = prefer_gracecolors
    pwav_dat = open('pwav.dat', 'w')
    for i, apb in enumerate(apbs.split()):
        atms, prjs, bands = split_apb(apb)
        pwav = bs.get_pwav(atms, prjs, bands)[spin, :, :]
        eigen = bs.get_eigen(bands)[spin, :, :] - bs.efermi
        graph.plot(x, eigen.transpose(), size=pwav.transpose()*scale,
                   datatype="xysize", color=colors[i%len(colors)],
                   label="-".join(str(x) for x in apb.split(":")[:2]), ls="none")
        print("#atom-projector-band:{}".format(apb), file=pwav_dat)
        print("\n".join(export_2d_data(pwav)), file=pwav_dat, end="\n\n")
    pwav_dat.close()

def m_v_pwav():
    """main stream"""
    args = _parser()
    # usually three are enough

    c = Cell.read(args.poscar)
    bs, kpts = read_procar(args.procar, filter_k_before=args.removek)
    bs.atms = c.atms
    kp = KPath(kpts, c.b)
    if args.spin >= bs.nspins:
        raise ValueError("ispin {} >= nspins = {}".format(args.spin, bs.nspins))
    p = Plot(1, 1, description=" ".join(argv))
    # set limits
    p[0].set_ylim(ymin=-6, ymax=6)
    p[0].set_xlim(0.0, kp.x[-1] + 0.001)
    # draw bands
    p[0].plot(kp.x, bs.eigen[args.spin, :, :].transpose() - bs.efermi, color="k", symbol="none")
    p[0].x.set_major(grid=True, color="grey", lw=3, ls="dashed")
    if args.ksymbols is not None:
        p[0].x.set_spec(kp.special_x, labels=args.ksymbols.split())
    p[0].y.set_major(major=3)
    p[0].y.set_label("Energy (eV)")
    # 36.0 is a base factor
    scale = (kp.x[-1] - kp.x[0]) / len(kp.x) * 36.0 * args.scale
    _logger.info("scale set to %r", scale)
    # draw zero line
    p[0].axhline(0.0, ls="dashed")

    if args.apb is not None:
        plot_pwav(p[0], kp.x, bs, args.apb, args.spin, scale)

    p.write(file=args.output)


if __name__ == "__main__":
    m_v_pwav()

