#!/usr/bin/env python3
"""draw band from wien2k output

"""
from argparse import ArgumentParser, RawDescriptionHelpFormatter

from mushroom.core.kpoints import KPath
from mushroom.core.ioutils import decode_float_ends, get_filename_wo_ext
from mushroom.w2k import Struct, read_energy, get_inputs
from mushroom.graceplot import Plot

def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("-c", dest="casename", type=str, default=None,
                   help="casename")
    p.add_argument("-p", dest="dirpath", type=str, default=".",
                   help="path to the directory containg inputs and outputs")
    p.add_argument("-f", dest="energyfile", type=str, default=None,
                   help="path of energy file")
    p.add_argument("--sym", dest="ksymbols", type=str, default=None,
                   help="Symbols of high symmetry points")
    p.add_argument("-o", dest="output", type=str, default="plotband.agr",
                   help="path of agr file to export")
    p.add_argument("--removek", type=int, default=0,
                   help="number of kpoints at first to remove")
    p.add_argument("--savefig", dest="fig_ext", type=str, default=None,
                   help="figure extension to convert")
    p.add_argument("--fermi", dest="efermi", type=float, default=None,
                   help="Fermi energy")
    p.add_argument("-e", dest="energy_range", type=str, default=None,
                   help="energy range, e.g. 'm8~5' for -8.0 to 5.0")
    return p


def get_bs_kpath(casename, dirpath, energyfile, efermi):
    """return BandStructure and KPath objects"""
    pstruct, penergy, pin1 = get_inputs("struct", "energy", "in1", 
                                        casename=casename,
                                        dirpath=dirpath, relative="CWD")
    if energyfile is not None:
        penergy = energyfile
    struct = Struct.read(pstruct)
    cell = struct.get_cell()
    bs, _, kpts = read_energy(penergy, efermi=efermi)
    kp = KPath(kpts, recp_latt=cell.b)
    bs.unit = "ev"
    return bs, kp


def m_w2k_band():
    """main stream"""
    args = _parser().parse_args()
    bs, kp = get_bs_kpath(args.casename, args.dirpath, args.energyfile, args.efermi)

    p, ax = Plot.subplots()
    ax.plot(kp.x, bs.eigen[0, :, :].transpose() - bs.efermi, color="k", symbol="none")
    ax.x.set_major(grid=True, color="grey", lw=3, ls="dashed")
    ksymbols = None
    if args.ksymbols is not None:
        ksymbols = args.ksymbols.split()
    ax.x.set_spec(kp.special_x, labels=ksymbols)
    if args.energy_range is not None:
        try:
            emin, emax = decode_float_ends(args.energy_range)
            ax.set_ylim(ymin=emin, ymax=emax)
        except ValueError:
            raise ValueError("invalid energy range", args.energy_range)
    else:
        ax.tight_graph()
    ax.set_xlim(0.0, kp.x[-1] + 0.0001)
    ax.y.set_major(major=4)
    ax.y.set_label("Energy (eV)")
    # draw zero line
    ax.axhline(0.0, ls="dashed", lw=2)
    p.write(file=args.output)
    if args.fig_ext is not None:
        p.savefig(get_filename_wo_ext(args.output) + "." + args.fig_ext)
    

if __name__ == "__main__":
    m_w2k_band()

