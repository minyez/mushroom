#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""draw total and projected density of states (DOS) from wien2k output
"""
from argparse import ArgumentParser, RawDescriptionHelpFormatter

from mushroom.w2k import Struct, read_dos, get_inputs
from mushroom.core.logger import create_logger
from mushroom.core.dos import split_ap
from mushroom.core.data import export_2d_data
from mushroom.core.ioutils import decode_float_ends, get_filename_wo_ext
from mushroom.visual.graceplot import Plot, prefer_gracecolors

_logger = create_logger("w2k_dos")
del create_logger

def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("-c", dest="casename", type=str, default=None,
                   help="casename")
    p.add_argument("-u", dest="unit", type=str, default=None,
                   help="unit of dos input, default to detect by the extension")
    p.add_argument("-d", dest="dosfile", type=str, default=None, nargs="+",
                   help="path of dosev files")
    p.add_argument("-p", dest="dirpath", type=str, default=".",
                   help="path to the directory containg inputs and outputs")
    p.add_argument("-o", dest="output", type=str, default="plotpdos.agr",
                   help="path of agr file to export projected density of states")
    p.add_argument("-e", dest="energy_range", type=str, default=None,
                   help="energy range, e.g. 'm8~5' for -8.0 to 5.0")
    p.add_argument("--ap", type=str, default=None, nargs="+",
                   help="atom-projector (ap) string")
    p.add_argument("--savefig", dest="fig_ext", type=str, default=None,
                   help="figure extension to convert")
#    p.add_argument("--vbmz", dest="vbm_zero", action="store_true",
#                   help="use VBM as energy zero")
    return p

def plot_pdos(graph, dos, aps, spin=None, colors=None):
    """
    Args:
        graph (Graph)
        dos (DensityOfStates)
        aps (str) : atom-projector
    """
    if colors is None:
        colors = prefer_gracecolors
    pdos_dat = open('pdos.dat', 'w')
    egrid = dos.egrid
    for i, ap in enumerate(aps):
        atms, prjs = split_ap(ap)
        pdos = dos.get_pdos(ispin=spin, atm=atms, prj=prjs)
        graph.plot(egrid-dos.efermi, pdos, color=colors[i%len(colors)], symbol="none",
                   label="-".join(str(x) for x in ap.split(":")))
        print("#atom-projector:{}".format(ap), file=pdos_dat)
        print("\n".join(export_2d_data([egrid, pdos], transpose=True)),
              file=pdos_dat, end="\n\n")

def m_w2k_dos():
    """the main stream"""
    args = _parser().parse_args()
    pstruct = get_inputs("struct", casename=args.casename, dirpath=args.dirpath,
                         relative="CWD")[0]
    struct = Struct.read(pstruct)
    _logger.info("reading dos from atms: %r", args.dosfile)
    dos = read_dos(*args.dosfile, unit=args.unit, mults=struct.mults)
    # plot to ev unit
    dos.unit = "ev"

    p, ax = Plot.subplots()
    ax.plot(dos.egrid - dos.efermi, dos.get_dos(), color="k", symbol="none", label="Total")
    if args.energy_range is not None:
        try:
            emin, emax = decode_float_ends(args.energy_range)
            ax.set_xlim(xmin=emin, xmax=emax)
            ax.tight_graph(yscale=1.1, xscale=None)
        except ValueError as err:
            raise ValueError("invalid energy range", args.energy_range) from err
    else:
        ax.tight_graph(yscale=1.1)

    ax.set_ylim(ymin=0.0)
    ax.set_legend(loc="upper left")
    ax.x.set_label("Energy ({})".format(dos.unit))
    ax.y.set_label("Density of states (arb. units)", charsize=2.)
    ax.y.set_ticklabel(switch="off")
    ax.axvline(0.0, ls="dashed", lw=3, color="grey")

    if dos.has_pdos and args.ap is not None:
        dos.atms = [x[:2].strip() for x in struct.atms_types]
        _logger.info("available atms: %r", dos.atms)
        _logger.info("available prjs: %r", dos.prjs)
        plot_pdos(ax, dos, args.ap)

    p.write(file=args.output)
    if args.fig_ext is not None:
        p.savefig(get_filename_wo_ext(args.output) + "." + args.fig_ext)


if __name__ == "__main__":
    m_w2k_dos()

