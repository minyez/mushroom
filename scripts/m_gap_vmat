#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""plot Coulomb matrix"""
from argparse import ArgumentParser, RawDescriptionHelpFormatter
import matplotlib.pyplot as plt
from mushroom.gap import Vmat
from mushroom.visual.pyplot import gracify

def plot_vmat(vmat: Vmat):
    """plot Coulomb matrix"""
    gracify()
    fig, ax = plt.subplots()
    c = ax.pcolor(vmat.vmat.real)
    fig.colorbar(c, ax=ax)
    return fig, ax

def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    #p.add_argument("-c", dest="casename", type=str, default=None, help="casename")
    #p.add_argument("-q", dest="iq", type=int, default=1, help="qpoint index (from 1)")
    #p.add_argument("-p", dest="dirpath", type=str, default=".",
    #               help="path to the directory containg inputs and outputs")
    #p.add_argument("-f", dest="vmatfile", type=str, default=None, help="path of vmat file")
    p.add_argument("vmatfile", type=str, help="path of vmat file")
    p.add_argument("--plot", action="store_true", help="plot the v-matrix")
    #p.add_argument("-n", dest="nbyte_recl", type=int, default=1, help="unit of record length")
    return p

def m_gap_vmat():
    """main stream"""
    args = _parser().parse_args()
    if args.vmatfile is not None:
        vmat = Vmat(args.vmatfile)
        print("     matrix size =", vmat.msize)
        print("Is vmat Hermitian?", vmat.is_hermitian())
        print("diagonal elements:")
        print(vmat.diag)
        print("      eigenvalues:")
        print(vmat.ev)
    else:
        raise FileNotFoundError
    if args.plot:
        fig, ax = plot_vmat(vmat)
        plt.show()

if __name__ == "__main__":
    m_gap_vmat()
