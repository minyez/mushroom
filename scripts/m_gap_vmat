#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""plot Coulomb matrix"""
from argparse import ArgumentParser, RawDescriptionHelpFormatter
import numpy as np
import matplotlib.pyplot as plt
from mushroom.gap import Vmat
from mushroom.visual.pyplot import rc_gracify

# make grace style as default
rc_gracify()

def plot_vmat(vmat: Vmat, compare_vmat=None):
    """plot Coulomb matrix"""
    fig, ax = plt.subplots()
    realpart = vmat.vmat.real
    if compare_vmat is not None:
        realpart = vmat.vmat.real - compare_vmat.vmat.real
    vmax = np.max(np.absolute(realpart))
    c = ax.pcolor(realpart, cmap="RdBu", vmin=-vmax, vmax=vmax)
    fig.colorbar(c, ax=ax)
    return fig, ax

def plot_negative_eigvec(vmat: Vmat):
    """plot Coulomb matrix"""
    fig, ax = plt.subplots()
    evec = vmat.evec
    ev = vmat.eval
    ax.set_xlim([1, vmat.msize])
    if ev[0] < 0:
        comps = np.absolute(evec[:, 0])
        maxcomp = np.max(comps)
        imaxcomp = np.argmax(comps) + 1
        ax.bar(list(range(1, vmat.msize+1)), comps)
        ax.annotate("Largest comp.: {:5.3f} ({:d} of {:d})"
                    .format(maxcomp, imaxcomp, vmat.msize),
                    (0.05, 0.95), xycoords="axes fraction")
    return fig, ax

def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    #p.add_argument("-c", dest="casename", type=str, default=None, help="casename")
    #p.add_argument("-q", dest="iq", type=int, default=1, help="qpoint index (from 1)")
    #p.add_argument("-p", dest="dirpath", type=str, default=".",
    #               help="path to the directory containg inputs and outputs")
    #p.add_argument("-f", dest="vmatfile", type=str, default=None, help="path of vmat file")
    p.add_argument("vmatfile", type=str, help="path of vmat file")
    p.add_argument("--plot", action="store_true", help="plot the v-matrix")
    p.add_argument("--diff", type=str, default=None,
                   help="path of vmat file to compare when plot")
    #p.add_argument("-n", dest="nbyte_recl", type=int, default=1, help="unit of record length")
    return p

def m_gap_vmat():
    """main stream"""
    args = _parser().parse_args()
    if args.vmatfile is not None:
        vmat = Vmat(args.vmatfile)
        print("     matrix size =", vmat.msize)
        print("Is vmat Hermitian?", vmat.is_hermitian())
        print("diagonal elements:")
        print(vmat.diag)
        print("      eigenvalues:")
        print(vmat.eval)
    else:
        raise FileNotFoundError
    if args.plot:
        compare_vmat = args.diff
        if compare_vmat is not None:
            compare_vmat = Vmat(compare_vmat)
        fig, ax = plot_vmat(vmat, compare_vmat=compare_vmat)
        fig, ax = plot_vmat(vmat)
        if args.diff:
            fig.savefig("diff_vmat.png")
        else:
            fig.savefig("vmat.png")
        fig, ax = plot_negative_eigvec(vmat)
        fig.savefig("first_nega_eigvec.png")

if __name__ == "__main__":
    m_gap_vmat()
