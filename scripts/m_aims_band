#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""extract the band energies from aims output"""
from typing import List
from argparse import ArgumentParser, RawDescriptionHelpFormatter

import numpy as np

from mushroom.aims.band import read_band_output
from mushroom.aims.input import Control, get_path_ksymbols
from mushroom.core.bs import display_band_analysis, display_transition_energies, resolve_band_crossing
from mushroom.core.cell import Cell
from mushroom.core.kpoints import KPathLinearizer
from mushroom.core.ioutils import get_filename_wo_ext, decode_float_ends, decode_int_ends
from mushroom.visual.graceplot import Plot


def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("out_files", nargs="+", type=str, help="band output files")
    p.add_argument("--unit", default='ev', type=str, help="energy unit")
    p.add_argument("-o", dest="output", type=str, default="plotband.agr",
                   help="path of agr file to export")
    p.add_argument("--data", dest="data_only", action="store_true",
                   help="only extract and print data, do not plot")
    p.add_argument("--rkbf", dest="remove_k_before", type=int, default=0,
                   help="number of kpoints at first to remove")
    p.add_argument("--rkbh", dest="remove_k_behind", type=int, default=None,
                   help="number of kpoints from behind to remove")
    p.add_argument("--geo", dest="geometry", default='geometry.in', type=str,
                   help="geometry.in file")
    p.add_argument("--savefig", dest="fig_ext", type=str, default=None,
                   help="figure extension to convert")
    p.add_argument("-e", dest="energy_range", type=str, default=None,
                   help="energy range (y-axis), e.g. 'm8~5' for -8.0 to 5.0")
    p.add_argument("--bands", dest="band_erange", type=str, default=None,
                   help="range of bands to plot, e.g. ~m2 for bands except the highest two")
    p.add_argument("--resolve", nargs="+", default=None, type=str,
                   help="resolve band crossing, e.g. 5,6,7")
    p.add_argument("--no-band-line", action="store_true", help="do not draw band lines, use marker")
    p.add_argument("--marker", default="none", help="marker")
    p.add_argument("--ms", dest="marker_size", default=1.0, help="marker size")
    p.add_argument(
        "--resolve-dthres",
        dest="deriv_thres", nargs="+", default=None, type=float,
        help="derivative threshold for band resolution. Try some negative value when you need resolution earlier"
    )
    p.add_argument("--transparent", action="store_true",
                   help="Set background of Grace graph to transparent")
    p.add_argument("-t", dest="trans", type=str, default=None, nargs="+",
                   help="transitions of interest, in the form of 'ivk:ick'")
    p.add_argument("-v", "--value", dest="value_only", action="store_true",
                   help="show values only when displaying band")

    g = p.add_mutually_exclusive_group()
    g.add_argument("--skbz", dest="isikib_zero", default=None, type=str,
                   help="use enk as energy zero, 'is:ik:ib', ib as a band identifier")
    g.add_argument("--ferz", dest="fermi_zero", action="store_true",
                   help="use Fermi energy as energy zero")
    g.add_argument("--vbmz", dest="vbm_zero", action="store_true",
                   help="use VBM as energy zero")
    g.add_argument("--cbmz", dest="cbm_zero", action="store_true",
                   help="use CBM as energy zero")
    p.add_argument("--ef", dest="efermi", type=float, default=None,
                   help="Fermi energy")
    g = p.add_mutually_exclusive_group()
    g.add_argument("--sym", dest="ksymbols", type=str, default=None, nargs="+",
                   help="Symbols of high symmetry points, overwrite control")
    g.add_argument("--sym-cf", dest="ksymbols_cf", type=str, const="control.in", nargs="?",
                   help="read ksymbols in band output fromm the path to the control file")
    return p


def m_aims_band():
    """the main stream"""
    args = _parser().parse_args()
    p, ax = Plot.subplots(1, 1, background=not args.transparent)
    bs, kpts = read_band_output(*args.out_files, unit=args.unit,
                                filter_k_before=args.remove_k_before,
                                filter_k_behind=args.remove_k_behind)
    nbands = bs.nbands
    c = Cell.read(args.geometry, format="aims")

    display_band_analysis(bs, kpts, value_only=args.value_only)
    if args.trans is not None:
        display_transition_energies(args.trans, bs, kpts, value_only=args.value_only)

    if args.data_only:
        return
    ref = 0.0
    if args.vbm_zero:
        ref = bs.vbm
    if args.cbm_zero:
        ref = bs.cbm
    if args.fermi_zero:
        ref = bs.efermi
    if args.isikib_zero:
        ispin, ikpt, ib = args.isikib_zero.split(":")
        ref = bs.get_eigen(ib)[int(ispin), int(ikpt), 0]

    kp = KPathLinearizer(kpts, c.b)
    if args.band_erange is not None:
        band_lb, band_ub = decode_int_ends(args.band_erange)

    eigen = bs.eigen[0, :, :]
    if args.resolve is not None:
        if args.deriv_thres is None:
            deriv_thres = [None,] * len(args.resolve)
        else:
            if len(args.deriv_thres) == 1:
                deriv_thres = [args.deriv_thres[0],] * len(args.resolve)
            elif len(args.deriv_thres) == len(args.resolve):
                deriv_thres = args.deriv_thres
            else:
                raise ValueError("deriv_thres should be either one number, or the same length as resolve")
        for resband, thres in zip(args.resolve, deriv_thres):
            bands_tuple = tuple(map(int, resband.split(',')))
            eigen[:, bands_tuple] = resolve_band_crossing(kp.x, eigen[:, bands_tuple], deriv_thres=thres)

    marker = args.marker
    ls = None
    if args.no_band_line:
        ls = "none"
        if marker == "none":
            marker = "o"
    ax.plot(kp.x, eigen.transpose() - ref, color="k", symbol=marker, ls=ls, ssize=args.marker_size)
    ax.x.set_major(grid=True, size=0.0, color="grey", lw=3, ls="longdashed")
    ksymbols = None
    if args.ksymbols is not None:
        ksymbols = args.ksymbols
        if len(args.ksymbols) == 1:
            ksymbols = args.ksymbols[0].split()

    if args.ksymbols_cf is not None:
        c_ksym = Control.read(args.ksymbols_cf)
        band_c_ksym = c_ksym.get_output("band", None)
        if band_c_ksym is None:
            raise ValueError("%s does not include output band" % args.ksymbols_cf)
        ksymbols = get_path_ksymbols(band_c_ksym)

    if ksymbols is not None and len(kp.special_x) != len(ksymbols):
        raise ValueError("Number of k segments different from number of symbols! Contact developer")

    ax.x.set_spec(kp.special_x, labels=ksymbols)
    # check non-continuous special kx
    x_break = []
    ksym_break = []
    if ksymbols is not None:
        for x, ksym in zip(kp.special_x, ksymbols):
            if "|" in ksym:
                x_break.append(x)
                ksym_break.append(ksym)
    if len(ksym_break) > 0:
        ax.altx.set(switch="on")
        ax.altx.set_bar(switch="off")
        ax.altx.set_tick(switch="off")
        ax.altx.set_ticklabel(switch="off")
        ax.altx.set_spec(x_break, labels=ksym_break)
        ax.altx.set_major(grid=True, size=0.0, color="black", lw=3, ls="solid")

    if args.energy_range is not None:
        try:
            emin, emax = decode_float_ends(args.energy_range)
            ax.set_ylim(ymin=emin, ymax=emax)
        except ValueError as err:
            raise ValueError("invalid energy range", args.energy_range) from err
    else:
        ax.set_ylim(-20, 20)

    # slightly wider than the last symbol to make it visible on graph
    ax.set_xlim(0.0, kp.x[-1] * 1.001)
    ax.y.set_major(major=4)
    ax.y.set_label("Energy (eV)")
    # draw zero line
    ax.axhline(0.0, ls="dashed")
    if args.output != "none":
        p.write(file=args.output)
        if args.fig_ext is not None:
            p.savefig(get_filename_wo_ext(args.output) + "." + args.fig_ext)


if __name__ == "__main__":
    m_aims_band()
