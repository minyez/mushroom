#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""draw band structure from vasp output and export to an XmGrace plot.
"""
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from mushroom.core.cell import Cell
from mushroom.core.kpoints import KPath
from mushroom.core.ioutils import get_filename_wo_ext, decode_float_ends
from mushroom.core.bs import display_band_analysis
from mushroom.visual.graceplot import Plot
from mushroom.vasp import read_eigen

def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("-v", dest="eigenval", type=str, default="EIGENVAL",
                   help="EIGENVAL file to read band data")
    p.add_argument("--pos", dest="poscar", type=str, default="POSCAR",
                   help="POSCAR structure file")
    p.add_argument("--sym", dest="ksymbols", type=str, default=None, nargs="+",
                   help="Symbols of high symmetry points")
    p.add_argument("-o", dest="output", type=str, default="plotband.agr",
                   help="path of agr file to export")
    p.add_argument("--data", dest="data_only", action="store_true",
                   help="only extract and print data, do not plot")
    p.add_argument("--removek", type=int, default=0,
                   help="number of kpoints at first to remove")
    p.add_argument("--savefig", dest="fig_ext", type=str, default=None,
                   help="figure extension to convert")
    p.add_argument("-e", dest="energy_range", type=str, default=None,
                   help="energy range (y-axis), e.g. 'm8~5' for -8.0 to 5.0")
    p.add_argument("--vbmz", dest="vbm_zero", action="store_true",
                   help="use VBM as energy zero")
    return p

def m_vasp_band():
    """main stream"""
    args = _parser().parse_args()
    p, ax = Plot.subplots(1, 1, background=False)
    c = Cell.read(args.poscar)

    # get band energies from EIGENVAL
    bs, _, kpts = read_eigen(args.eigenval, filter_k_before=args.removek)
    display_band_analysis(bs, kpts)
    if args.data_only:
        return
    ref = 0.0
    if args.vbm_zero:
        ref = bs.efermi
    kp = KPath(kpts, c.b)
    ax.plot(kp.x, bs.eigen[0, :, :].transpose() - ref, color="k", symbol="none")
    ax.x.set_major(grid=True, color="grey", lw=3, ls="dashed")
    ksymbols = None
    if args.ksymbols is not None:
        ksymbols = args.ksymbols
        if len(args.ksymbols) == 1:
            ksymbols = args.ksymbols[0].split()
    ax.x.set_spec(kp.special_x, labels=ksymbols)
    if args.energy_range is not None:
        try:
            emin, emax = decode_float_ends(args.energy_range)
            ax.set_ylim(ymin=emin, ymax=emax)
        except ValueError as err:
            raise ValueError("invalid energy range", args.energy_range) from err
    ax.set_xlim(0.0, kp.x[-1] + 0.0001)
    ax.set_ylim(-6, 6)
    ax.y.set_major(major=4)
    ax.y.set_label("Energy (eV)")
    # draw zero line
    ax.axhline(0.0, ls="dashed")
    p.write(file=args.output)
    if args.fig_ext is not None:
        p.savefig(get_filename_wo_ext(args.output) + "." + args.fig_ext)


if __name__ == "__main__":
    m_vasp_band()

