#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""draw band structure from vasp output and export to an XmGrace plot.

vbm is used as Fermi-energy
"""
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from mushroom.core.cell import Cell
from mushroom.core.kpoints import KPath
from mushroom.core.ioutils import get_filename_wo_ext, decode_float_ends
from mushroom.visual.graceplot import Plot

from mushroom.vasp import read_eigen

def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("-e", dest="eigenval", type=str, default="EIGENVAL",
                   help="EIGENVAL file to read band data")
    p.add_argument("--pos", dest="poscar", type=str, default="POSCAR",
                   help="POSCAR structure file")
    p.add_argument("--sym", dest="ksymbols", type=str, default=None,
                   help="Symbols of high symmetry points")
    p.add_argument("-e", dest="energy_range", type=str, default=None,
                   help="energy range, e.g. 'emin:emax'")
    p.add_argument("-o", dest="output", type=str, default="plotband.agr",
                   help="path of agr file to export")
    p.add_argument("--removek", type=int, default=0,
                   help="number of kpoints at first to remove")
    p.add_argument("--savefig", dest="fig_ext", type=str, default=None,
                   help="figure extension to convert")
    p.add_argument("-e", dest="energy_range", type=str, default=None,
                   help="energy range, e.g. 'm8~5' for -8.0 to 5.0")
    return p

def m_v_band():
    """main stream"""
    args = _parser().parse_args()
    p = Plot(1, 1)
    c = Cell.read(args.poscar)

    # get band energies from EIGENVAL
    bs, _, kpts = read_eigen(args.eigenval, filter_k_before=args.removek)
    kp = KPath(kpts, c.b)
    p[0].plot(kp.x, bs.eigen[0, :, :].transpose() - bs.efermi, color="k", symbol="none")
    p[0].x.set_major(grid=True, color="grey", lw=3, ls="dashed")
    ksymbols = None
    if args.ksymbols is not None:
        ksymbols = args.ksymbols.split()
    p[0].x.set_spec(kp.special_x, labels=ksymbols)
    if args.energy_range is not None:
        try:
            emin, emax = decode_float_ends(args.energy_range)
            p[0].set_ylim(ymin=emin, ymax=emax)
        except ValueError as err:
            raise ValueError("invalid energy range", args.energy_range) from err
    p[0].set_xlim(0.0, kp.x[-1] + 0.0001)
    p[0].y.set_major(major=4)
    p[0].y.set_label("Energy (eV)")
    # draw zero line
    p[0].axhline(0.0, ls="dashed")
    p.write(file=args.output)
    if args.fig_ext is not None:
        p.savefig(get_filename_wo_ext(args.output) + "." + args.fig_ext)


if __name__ == "__main__":
    m_v_band()

