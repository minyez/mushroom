#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""create/read a cell and export to various code-specific format

It can also used to convert

Use `-I` for converting file of one cell format to another
Use `-c` for creating from predefined sample, stored in `db/cell`.
Use `-l` for curating available cell samples.
"""
from os.path import isfile
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from mushroom.db import DBCell
from mushroom.io import CellIO

try:
    from argcomplete import autocomplete
except ImportError:
    autocomplete = None


def _parser():
    """parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    igrp = p.add_mutually_exclusive_group()
    igrp.add_argument('-I', dest='input_file', type=str,
                      default=None, help="input file")
    igrp.add_argument('-f', dest="search", type=str, default=None,
                      help="search and print out cells with file names matching the regex")
    igrp.add_argument('-c', dest='cell', default=None,
                      help="extract predefined sample cell. int or str. see -l")
    igrp.add_argument('-l', dest='show', action="store_true",
                      help="list predefined sample cells")
    p.add_argument('--sc', dest='supercell', default=None, nargs=3, type=int,
                   help="create super cell")
    p.add_argument('--prim', dest='primitize', action="store_true",
                   help="primitize the cell (spglib required)")
    p.add_argument('--std', dest='standardize', action="store_true",
                   help="standardize the cell (spglib required)")
    p.add_argument('-i', dest='input_format', choices=CellIO.avail_readers,
                   type=str, default=None,
                   help="format of input file, default use automatic detection")
    p.add_argument('--db', dest='db_cell_path', type=str, default=None,
                   help="(absolute) path of the cell database")
    p.add_argument('-O', dest='output_path', type=str, default=None,
                   help="output file")
    p.add_argument('-o', dest='output_format', type=str,
                   choices=CellIO.avail_writers,
                   default=None, help="output format")
    if autocomplete is not None:
        autocomplete(p)
    return p


def build_cell():
    """main stream"""
    args = _parser().parse_args()

    input_file = None
    if args.input_file is not None:
        input_file = args.input_file
        if not isfile(input_file):
            raise FileNotFoundError(input_file)
    else:
        # cell database operations
        cdb = DBCell(args.db_cell_path)
        if args.cell is not None:
            input_file = cdb.get_cell(args.cell)
        elif args.show or args.search:
            if cdb.N == 0:
                print("No cell entries are found at", cdb._db_path)
            for i, s in cdb.filter(args.search):
                print("{:>3d} : {:s}".format(i, s))
            return
        else:
            raise ValueError("specify search/cell argument. See help")

    cio = CellIO(input_file, format=args.input_format)
    cio.manipulate(primitize=args.primitize, standardize=args.standardize,
                   supercell=args.supercell)
    cio.write(output_path=args.output_path, format=args.output_format)


if __name__ == "__main__":
    build_cell()

