#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""create the aims control object and dump to file

Allow the user the handle the basis functions and ABFs in the species setup,
by using the ``--handle-basis`` and ``--handle-abf`` options, respectively.
The option value should be a string like "x:arg1:arg2:...".
For example of ``--handle-basis``
The letter "x" should be a, m or d, corresponding to ``add_basis``, ``modify_basis``,
and ``delete_basis`` methods of the ``Species`` object.
The left string is splited by ``:`` and parsed in the same order to the method.

Currently an template including the species is required.
"""
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from mushroom.aims import Control, Species

def _parser():
    """the parser"""
    p = ArgumentParser(description=__doc__, formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("control", type=str, help="the filename to dump the control")
    p.add_argument("-i", dest="control_temp", type=str, default=None,
                   help="template to initialize the control")
    p.add_argument("-t", dest="tags", nargs="+", type=str, default=None,
                   help="tag pair in 'tag:value format'")
    p.add_argument("--ot", dest="output_tags", nargs="+", type=str, default=None,
                   help="output tags")
    p.add_argument("-s", dest="species", type=str, default="defaults_2020",
                   help="species category")
    p.add_argument("--sl", dest="species_level", type=str, default="intermediate",
                   help="species accuracy level, e.g. light, tight")
    p.add_argument("-e", dest="elements", type=str, nargs="+",
                   help="the elements in species setup")
    p.add_argument("--handle-basis", type=str, nargs="+", default=None,
                   help="handle the basis, see description")
    p.add_argument("--handle-abf", type=str, nargs="+", default=None,
                   help="handle the ABFs, see description")
    return p

def _handle_tag_pair(tag_pair):
    tv = tag_pair.split(':', maxsplit=1)
    try:
        t, v = tv
    except ValueError:
        t = tv[0]
        v = "t"
    if v.lower() in ['t', '.t.', '.true.', 'true']:
        v = True
    elif v.lower() in ['f', '.f.', '.false.', 'false']:
        v = False
    return t, v

def m_aims_control():
    """the main stream"""
    args = _parser().parse_args()
    if args.control_temp is None:
        raise NotImplementedError("please parse the template")
    c = Control.read(args.control_temp)
    if args.tags is not None:
        for t in args.tags:
            c.update_tag(*_handle_tag_pair(t))
    if args.output_tags is not None:
        for t in args.output_tags:
            c.update_output(*_handle_tag_pair(t))

    # handle basis
    if args.handle_basis is not None:
        for hb in args.handle_basis:
            bargs = hb.split(':')
            f = {"a": c.add_basis, "m": c.modify_basis, "d": c.delete_basis}.get(bargs[0], None)
            if f is None:
                raise ValueError(f"Support basis method a/m/d, parsed: {bargs[0]}")
            f(*bargs[1:])
    # handle abf
    if args.handle_abf is not None:
        for hb in args.handle_abf:
            bargs = hb.split(':')
            f = {"a": c.add_abf, "m": c.modify_abf, "d": c.delete_abf}.get(bargs[0], None)
            if f is None:
                raise ValueError(f"Support basis method a/m/d, parsed: {bargs[0]}")
            f(*bargs[1:])

    c.write(args.control)


if __name__ == "__main__":
    m_aims_control()
